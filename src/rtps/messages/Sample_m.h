//
// Generated file, do not edit! Created by opp_msgtool 6.0 from src/rtps/messages/Sample.msg.
//

#ifndef __SAMPLE_M_H
#define __SAMPLE_M_H

#if defined(__clang__)
#  pragma clang diagnostic ignored "-Wreserved-id-macro"
#endif
#include <omnetpp.h>

// opp_msgtool version check
#define MSGC_VERSION 0x0600
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of opp_msgtool: 'make clean' should help.
#endif

class Sample;
/**
 * Class generated from <tt>src/rtps/messages/Sample.msg:17</tt> by opp_msgtool.
 * <pre>
 * packet Sample
 * {
 *     // TODO description 
 *     int sequenceNumber;
 * 
 *     // Protocol relevant data
 *     int size;
 * 
 *     // Evaluation data
 *     simtime_t publisherSendTime;
 *     simtime_t subscriberReceivedTime;
 * 
 * }
 * </pre>
 */
class Sample : public ::omnetpp::cPacket
{
  protected:
    int sequenceNumber = 0;
    int size = 0;
    omnetpp::simtime_t publisherSendTime = SIMTIME_ZERO;
    omnetpp::simtime_t subscriberReceivedTime = SIMTIME_ZERO;

  private:
    void copy(const Sample& other);

  protected:
    bool operator==(const Sample&) = delete;

  public:
    Sample(const char *name=nullptr, short kind=0);
    Sample(const Sample& other);
    virtual ~Sample();
    Sample& operator=(const Sample& other);
    virtual Sample *dup() const override {return new Sample(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    virtual int getSequenceNumber() const;
    virtual void setSequenceNumber(int sequenceNumber);

    virtual int getSize() const;
    virtual void setSize(int size);

    virtual omnetpp::simtime_t getPublisherSendTime() const;
    virtual void setPublisherSendTime(omnetpp::simtime_t publisherSendTime);

    virtual omnetpp::simtime_t getSubscriberReceivedTime() const;
    virtual void setSubscriberReceivedTime(omnetpp::simtime_t subscriberReceivedTime);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const Sample& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, Sample& obj) {obj.parsimUnpack(b);}


namespace omnetpp {

template<> inline Sample *fromAnyPtr(any_ptr ptr) { return check_and_cast<Sample*>(ptr.get<cObject>()); }

}  // namespace omnetpp

#endif // ifndef __SAMPLE_M_H

