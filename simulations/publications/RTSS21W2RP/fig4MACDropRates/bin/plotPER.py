"""
Uses seaborn to plot.
Takes old csv files from paper publication as inputs.
pandas.DataFrames are not the original input but the csv generated by the experiment is converted
into them
"""
import seaborn as sns
import matplotlib.pyplot as plt
import pandas as pd
import argparse
import csv
import os

def csv_to_panda(filename):
    """
    Returns panda data
    """
    data = pd.read_csv(filename)
    return data

def plot_frame_drop_rate(data, pdffilename):

    print("--- plot frame drop rate ---")

    current_palette = sns.color_palette()

    data["frame_drop_rate"] = 100 * data["frame_drop_rate"]
    data["fer"] = 100 * data["fer"]
    data['fer'] = data['fer'].astype(int)
    #data['Packet Loss Rate'] = data['Packet Loss Rate'].astype(int)
    colors = [current_palette[5], current_palette[1], current_palette[2], current_palette[3]]
    plt.figure(figsize=(5,3))
    ax =sns.pointplot(x='fer', y='frame_drop_rate', data=data, color="red")
    ax.set_xticklabels(ax.get_xticklabels(), rotation=45, horizontalalignment='right')
    ax.set_xticklabels(ax.get_xticklabels(),horizontalalignment = 'center')
    ax.set(yticklabels=[0,20,40,60,80,100], yticks=[0,20,40,60,80,100],ylim=(-5,105))
    #ax.legend(loc='upper left')


    ax.tick_params(labelsize=13)
    ax.set_xlabel("frame error rate (%)", fontsize = 17)
    ax.set_ylabel("frame \n drop rate (%) ", fontsize = 17)
    fig = plt.gcf()
    plt.plot()
    plt.tight_layout()

    plt.savefig(pdffilename)



def plot_sample_drop_rate(data, pdffilename):

    print("--- plot sample drop rate ---")

    current_palette = sns.color_palette()

    data["sample_drop_rate"] = 100 * data["sample_drop_rate"]
    data["fer"] = 100 * data["fer"]
    data['fer'] = data['fer'].astype(int)
    colors = [current_palette[5], current_palette[1], current_palette[2], current_palette[3]]
    plt.figure(figsize=(5,3))
    ax =sns.pointplot(x='fer', y='sample_drop_rate', data=data,  color="red")
    ax.set_xticklabels(ax.get_xticklabels(), rotation=45, horizontalalignment='right')
    ax.set_xticklabels(ax.get_xticklabels(),horizontalalignment = 'center')
    ax.set(yticklabels=[0,20,40,60,80,100], yticks=[0,20,40,60,80,100],ylim=(-5,105))

    ax.tick_params(labelsize=13)
    ax.set_xlabel("frame error rate (%)", fontsize = 17)
    ax.set_ylabel("sample \n drop rate (%) ", fontsize = 17)

    fig = plt.gcf()
    plt.plot()
    plt.tight_layout()
    plt.savefig(pdffilename)



    

if __name__ == '__main__':

    # Create folder if it does not exist
    path = "./figures"
    exists = os.path.exists(path)
    if not exists:
       os.makedirs(path)
   
    data = csv_to_panda("./results/fer_to_per.csv")
    plot_frame_drop_rate(data , "figures/frame_drop_rate.pdf")
    
    data = csv_to_panda("./results/fer_to_per.csv")
    plot_sample_drop_rate(data , "figures/sample_drop_rate.pdf")



